#!/bin/bash
# setup-terraform-state-storage.sh
#
# This script creates the Azure Storage infrastructure needed for Terraform state management.
# It creates a resource group, storage account, and container for Terraform state files.

# Default values
LOCATION="eastus"
RESOURCE_GROUP="tfstate-rg"
STORAGE_ACCOUNT="tfstate$(date +%s | sha256sum | head -c 8)"
CONTAINER="tfstate"

# Display usage information
usage() {
    echo "Usage: $0 [-l <location>] [-g <resource_group>] [-a <storage_account>] [-c <container>]"
    echo ""
    echo "Optional parameters:"
    echo "  -l, --location        Azure region for the storage account (default: eastus)"
    echo "  -g, --resource-group  Name of the resource group (default: tfstate-rg)"
    echo "  -a, --storage-account Name of the storage account (default: auto-generated)"
    echo "  -c, --container       Name of the blob container (default: tfstate)"
    echo "  -h, --help            Display this help message"
    exit 1
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -l|--location)
            LOCATION="$2"
            shift 2
            ;;
        -g|--resource-group)
            RESOURCE_GROUP="$2"
            shift 2
            ;;
        -a|--storage-account)
            STORAGE_ACCOUNT="$2"
            shift 2
            ;;
        -c|--container)
            CONTAINER="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Validate storage account name
if [[ ! "$STORAGE_ACCOUNT" =~ ^[a-z0-9]{3,24}$ ]]; then
    echo "ERROR: Storage account name must be 3-24 lowercase alphanumeric characters."
    exit 1
fi

echo "This script will create the following Azure resources for Terraform state management:"
echo "  - Resource Group: $RESOURCE_GROUP in $LOCATION"
echo "  - Storage Account: $STORAGE_ACCOUNT (with GRS)"
echo "  - Container: $CONTAINER"
echo ""

# Ask for confirmation
read -p "Do you want to continue? (Y/N): " CONFIRM
if [[ "$CONFIRM" != "Y" && "$CONFIRM" != "y" ]]; then
    echo "Operation cancelled."
    exit 0
fi

# Check if Azure CLI is installed
if ! command -v az &> /dev/null; then
    echo "ERROR: Azure CLI not found. Please install it: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi

# Check if logged in to Azure
echo "Checking Azure login status..."
if ! az account show &> /dev/null; then
    echo "Not logged in to Azure. Please log in:"
    az login
fi

# Create resource group
echo "Creating resource group..."
az group create --name "$RESOURCE_GROUP" --location "$LOCATION" || {
    echo "ERROR: Failed to create resource group."
    exit 1
}

# Create storage account
echo "Creating storage account..."
az storage account create \
    --resource-group "$RESOURCE_GROUP" \
    --name "$STORAGE_ACCOUNT" \
    --sku "Standard_GRS" \
    --encryption-services blob \
    --min-tls-version "TLS1_2" \
    --allow-blob-public-access false || {
    echo "ERROR: Failed to create storage account."
    exit 1
}

# Get storage account key
echo "Getting storage account key..."
ACCOUNT_KEY=$(az storage account keys list --resource-group "$RESOURCE_GROUP" --account-name "$STORAGE_ACCOUNT" --query "[0].value" -o tsv) || {
    echo "ERROR: Failed to get storage account key."
    exit 1
}

# Create blob container
echo "Creating blob container..."
az storage container create \
    --name "$CONTAINER" \
    --account-name "$STORAGE_ACCOUNT" \
    --account-key "$ACCOUNT_KEY" || {
    echo "ERROR: Failed to create blob container."
    exit 1
}

echo ""
echo "Terraform state storage has been successfully set up."
echo ""
echo "Use the following backend configuration in your Terraform code:"
echo ""
echo "terraform {"
echo "  backend \"azurerm\" {"
echo "    resource_group_name  = \"$RESOURCE_GROUP\""
echo "    storage_account_name = \"$STORAGE_ACCOUNT\""
echo "    container_name       = \"$CONTAINER\""
echo "    key                  = \"<your-state-file-name>.tfstate\""
echo "  }"
echo "}"
echo ""
echo "Or use our helper script to initialize Terraform with these settings:"
echo "./configure-terraform-backend.sh -r <region> -g <resource_group_name> \\"
echo "  -s \"$RESOURCE_GROUP\" -a \"$STORAGE_ACCOUNT\" -c \"$CONTAINER\""
